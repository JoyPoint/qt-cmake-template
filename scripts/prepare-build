#!/usr/bin/env ruby
###
# Copyright (c) 2011, Paul Gideon Dann
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
###

require 'erubis'

SCRIPT_DIR = File.dirname(__FILE__)
SNIPPET_DIR = SCRIPT_DIR + '/template-snippets'
BASE_DIR = SCRIPT_DIR + '/..'
SOURCE_DIR = BASE_DIR + '/source'
TESTS_DIR = BASE_DIR + '/tests'

require SCRIPT_DIR + '/template-helpers'

class HelpersContext
  include HelperMethods

  def initialize(locals = {})
    @locals = locals
  end

  def self.get_binding(locals = {})
    self.new(locals).get_binding
  end

  def get_binding
    binding
  end

  def method_missing(name, *args)
    if args.empty?
      @locals[name]
    else
      STDERR.puts %(    ERROR: Call to non-existant helper "#{name}".)
    end
  end
end

class PrepareBuild
  def self.render_file(path, options = {})
    if File.exists?(path)
      input = File.read(path)
      generator = Erubis::Eruby.new(input)
      new_locals = Hash.new
      new_locals.merge!(options[:locals])  if options[:locals]
      new_locals[:target_file] = options[:to]  if options[:to]
      output = generator.result(HelpersContext.get_binding(new_locals))
      if options[:to]
        File.open(options[:to], 'w') {|out| out.write(output) }
      end
      output
    else
      STDERR.puts "File does not exist: #{name}"
      nil
    end
  end

  def self.snippet_path(name)
    template_path = SNIPPET_DIR + "/#{name}.txt.erb"
  end

  def self.snippet(name, locals)
    render_file(snippet_path(name), :locals => locals)
  end

  def self.relative_path(path)
    path[(BASE_DIR.length + 1)..-1]
  end

  def self.run
    puts 'Generating files from ERB templates:'
    [SOURCE_DIR, TESTS_DIR].each do |directory|
      Dir.glob(directory + '/**/*.erb').each do |template_path|
        target_path = template_path[0..-5]
        puts "  #{relative_path(target_path)}"
        render_file(template_path, :to => target_path)
      end
    end

    puts 'Creating CMakeLists.txt files in empty directories:'
    {
      SOURCE_DIR => 'directory',
      TESTS_DIR => 'test-directory'
    }.each_pair do |directory, snippet|
      Dir.glob(directory + '/**/') do |entry|
        if not File.exists?(entry + 'CMakeLists.txt.erb')
          target_path = entry + 'CMakeLists.txt'
          puts "  #{relative_path(target_path)}"
          render_file(snippet_path(snippet), :to => target_path)
        end
      end
    end
  end
end

PrepareBuild.run
